# TypeProf 0.21.7

# Classes
class PGSpecHelper
  VERSION: String
  include IndexCache
  include ForeignKeyCache
  include StructureCache
  include ValidationCache
  include Indexes
  include PrimaryKeys
  include UniqueConstraints
  include ForeignKeys
  include Validations
  include Columns
  include Tables
  include Schemas
  include Connection
  include Configuration
  @has_changes: bool
  @name: untyped
  @database_type: String
  @configuration: untyped
  @connection: untyped
  @validations_cache_exists: untyped
  @structure_cache_exists: untyped
  @keys_and_unique_constraints_cache_exists: untyped

  attr_reader database: untyped
  attr_reader username: untyped
  attr_reader password: untyped
  attr_reader host: untyped
  attr_reader port: untyped
  def initialize: (untyped name) -> void
  def has_changes?: -> bool
  def reset!: (?bool force) -> bool?

  module Configuration
    @name: untyped
    @database_type: String
    @configuration: untyped

    def load_configuration_for: (:postgres database_type, untyped name) -> untyped
    def optional_configuration_value: (:password key) -> untyped
    def require_configuration_value: (:database | :host | :port | :username key) -> untyped
    def load_configuration_file: -> untyped

    class MissingConfigurationError < StandardError
    end

    class ConfigurationNotLoadedError < StandardError
    end

    class MissingRequiredNameError < StandardError
    end

    class MissingRequiredDatabaseTypeError < StandardError
    end
  end

  module Connection
    @connection: untyped
    @host: bot
    @port: bot
    @username: bot
    @password: bot
    @database: bot

    def connection: -> untyped

    class ConnectionFailedError < StandardError
    end
  end

  module Schemas
    @has_changes: bool
    @database: bot
    @host: bot

    def assert_database_empty!: -> nil
    def create_schema: (untyped schema_name) -> bool
    def get_schema_names: -> untyped
    def delete_all_schemas: (?cascade: bool) -> bool
  end

  module Tables
    @has_changes: bool

    def create_table: (untyped schema_name, untyped table_name) -> bool
    def get_table_names: (untyped schema_name) -> untyped
    def delete_tables: (untyped schema_name) -> untyped
  end

  module Columns
    @has_changes: bool

    def create_column: (untyped schema_name, untyped table_name, untyped column_name, untyped `type`) -> bool
  end

  module Validations
    @has_changes: bool

    def create_validation: (untyped schema_name, untyped table_name, untyped validation_name, untyped check_clause) -> bool
  end

  module ForeignKeys
    @has_changes: bool

    def create_foreign_key: (untyped schema_name, untyped table_name, untyped column_names, untyped foreign_schema_name, untyped foreign_table_name, untyped foreign_column_names, untyped foreign_key_name) -> bool
  end

  module UniqueConstraints
    @has_changes: bool

    def add_unique_constraint: (untyped schema_name, untyped table_name, untyped column_names, untyped constraint_key_name) -> bool
  end

  module PrimaryKeys
    @has_changes: bool

    def add_primary_key: (untyped schema_name, untyped table_name, untyped column_names) -> bool
  end

  module Indexes
    @has_changes: bool

    def create_index: (untyped schema_name, untyped table_name, untyped column_names, untyped index_name, untyped `type`, untyped deferrable, untyped initially_deferred) -> bool
  end

  module ValidationCache
    @validations_cache_exists: untyped

    def refresh_validation_cache_materialized_view: -> nil
    def validations_cache_exists?: -> untyped
  end

  module StructureCache
    @structure_cache_exists: untyped

    def refresh_structure_cache_materialized_view: -> nil
    def structure_cache_exists?: -> untyped
  end

  module ForeignKeyCache
    @keys_and_unique_constraints_cache_exists: untyped

    def refresh_keys_and_unique_constraints_cache_materialized_view: -> nil
    def keys_and_unique_constraints_cache_exists?: -> untyped
  end

  module IndexCache
    @index_cache_exists: untyped

    def refresh_index_cache_materialized_view: -> nil
    def index_cache_exists?: -> untyped
  end
end
